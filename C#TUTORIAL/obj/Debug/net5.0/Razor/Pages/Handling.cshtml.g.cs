#pragma checksum "C:\C#TUTORIAL\Pages\Handling.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "48d41f12a41213fa159847f791d9eb19cd1f3b26"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(C_TUTORIAL.Pages.Pages_Handling), @"mvc.1.0.razor-page", @"/Pages/Handling.cshtml")]
namespace C_TUTORIAL.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\C#TUTORIAL\Pages\_ViewImports.cshtml"
using C_TUTORIAL;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"48d41f12a41213fa159847f791d9eb19cd1f3b26", @"/Pages/Handling.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8e3c987eef8e67713cc41d4d02eb288681eef6ce", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Handling : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/stylesheet.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\C#TUTORIAL\Pages\Handling.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n     ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "48d41f12a41213fa159847f791d9eb19cd1f3b263690", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    <div class=""scroll"">
        <center></br></br><h3>Exception Handling </h3></center>
        <p class=""f_size"">
            A try block is used by C# programmers to partition code that might be affected by an exception. Associated catch blocks are used 
            to handle any resulting exceptions. A finally block contains code that is run whether or not an exception is thrown in the try 
            block, such as releasing resources that are allocated in the try block. A try block requires one or more associated catch blocks,
             or a finally block, or both. </p>

        <p class=""f_size""><b>&#x2022;</b>The following examples show a try-catch statement, a try-finally statement, and a try-catch-finally statement.</p>
        <p class=""f_size"">&nbsp;&nbsp;&nbsp;try</br>
                &nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Code to try goes here.</br>
                &nbsp;&nbsp;&nbsp;}</br>
                &nbsp;&nbsp;&nbsp;catch (SomeSpecific");
            WriteLiteral(@"Exception ex)</br>
                &nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Code to handle the exception goes here.</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Only catch exceptions that you know how to handle.</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Never catch base class System.Exception without</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// rethrowing it at the end of the catch block.</br>
                &nbsp;&nbsp;&nbsp;}</p>

        <p class=""f_size""><b>&bull;</b>Try,catchand finally:</p>

        <p class=""f_size"">&nbsp;&nbsp;&nbsp;try</br>
                &nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Code to try goes here.</br>
                &nbsp;&nbsp;&nbsp;}</br>
                &nbsp;&nbsp;&nbsp;catch (SomeSpecificException ex)</br>
                &nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Code to handle the exception goes here.</br>
                &nbsp");
            WriteLiteral(@";&nbsp;&nbsp;}</br>
                &nbsp;&nbsp;&nbsp;finally</br>
                &nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Code to execute after the try (and possibly catch) blocks</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// goes here.</br>
                &nbsp;&nbsp;&nbsp;}</p>

        <h5>Catch Blocks</h5></br>
        <p class=""f_size"">A catch block can specify the type of exception to catch. The type specification is called an exception filter.
             The exception type should be derived from Exception. In general, don't specify Exception as the exception filter unless either
              you know how to handle all exceptions that might be thrown in the try block, or you've included a throw statement at the end of
               your catch block.</p>

        <p class=""f_size"">Catch exceptions when the following conditions are true:</p>
        <p class=""f_size"">&nbsp;&nbsp;&nbsp;&nbsp;<b>&#x2022;</b>You have a good understanding of why th");
            WriteLiteral(@"e exception might be thrown, and you can implement a specific recovery, 
            such as prompting the user to enter a new file name when you catch a FileNotFoundException object.</br>
            &nbsp;&nbsp;&nbsp;&nbsp;<b>&#x2022;</b>You can create and throw a new, more specific exception. </p>

        <p class=""f_size"">&nbsp;&nbsp;&nbsp;int GetInt(int[] array, int index)</br>
                &nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return array[index];</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (IndexOutOfRangeException e)</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new ArgumentOutOfRangeException(</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""Parameter index is out of range."", e);</br>");
            WriteLiteral(@"
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</br>
                &nbsp;&nbsp;&nbsp;}</p>

        <h5>Finally Blocks</h5></br>

        <p class=""f_size"">A finally block enables you to clean up actions that are performed in a try block. If present, the finally block 
            executes last, after the try block and any matched catch block. A finally block always runs, whether an exception is thrown or a 
            catch block matching the exception type is found.</p>

    </div>
    
	

      
    
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Handling> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Handling> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Handling>)PageContext?.ViewData;
        public Handling Model => ViewData.Model;
    }
}
#pragma warning restore 1591
