@page
@model Interface_learn
@{
    ViewData["Title"] = "Home page";
}

     <link rel="stylesheet" href="~/css/stylesheet.css" />
    <div class="scroll">
        <center></br></br><h3>Interfaces</h3></center>
        <p class="f_size">
           An interface contains definitions for a group of related functionalities that a non-abstract class or a struct must implement. 
           An interface may define static methods, which must have an implementation. Beginning with C# 8.0, an interface may define a 
           default implementation for members. An interface may not declare instance data such as fields, auto-implemented properties, or 
           property-like events.</p>
        
        <p class="f_size">By using interfaces, you can, for example, include behavior from multiple sources in a class. That capability is 
            important in C# because the language doesn't support multiple inheritance of classes. In addition, you must use an interface if 
            you want to simulate inheritance for structs, because they can't actually inherit from another struct or class.</p>

        <h6>You define an interface by using the interface keyword as the following example shows.</h6>

        <p class="f_size">&nbsp;&nbsp;&nbsp;interface IEquatable<T></br>
                &nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool Equals(T obj);</br>
                &nbsp;&nbsp;&nbsp;}</p>

        <h6>The following example shows an implementation of the IEquatable<T> interface. The implementing class, Car, must provide an implementation of the Equals method.</h6>

        <p class="f_size">&nbsp;&nbsp;&nbsp;public class Car : IEquatable<Car></br>
                &nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public string? Make { get; set; }</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public string? Model { get; set; }</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public string? Year { get; set; }</br>

                &nbsp;&nbsp;&nbsp;// Implementation of IEquatable<T> interface</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public bool Equals(Car? car)</br>
                &nbsp;&nbsp;&nbsp;&nbsp;{</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (this.Make, this.Model, this.Year) ==</br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(car?.Make, car?.Model, car?.Year);</br>
                &nbsp;&nbsp;&nbsp;&nbsp;}</br>
                &nbsp;&nbsp;&nbsp;}</p>

        <h5>Interfaces summary</h5></br>
        <p class="f_size">&nbsp;&nbsp;&nbsp;<b>&#x2022;</b>An interface can't be instantiated directly. Its members are implemented by any class or struct that implements the interface.</br>
        &nbsp;&nbsp;&nbsp;<b>&#x2022;</b>A class or struct can implement multiple interfaces. A class can inherit a base class and also implement one or more interfaces.
        </p>

    <div data-pym-src="https://www.jdoodle.com/embed/v0/4V7Y"></div>

    <script src="https://www.jdoodle.com/assets/jdoodle-pym.min.js" type="text/javascript">
    </script>
    </div>
    
	

      
    
