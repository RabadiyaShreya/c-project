@page
@model Deconstructing_tuple
@{
    ViewData["Title"] = "Home page";
}

     <link rel="stylesheet" href="~/css/stylesheet.css" />
    <div class="scroll">
        <center></br></br><h3>Deconstructing tuples and other types</h3></center>
        <p class="f_size">
            A tuple provides a lightweight way to retrieve multiple values from a method call. But once you retrieve the tuple, 
            you have to handle its individual elements. Working on an element-by-element basis is cumbersome, as the following example 
            shows. The QueryCityData method returns a three-tuple, and each of its elements is assigned to a variable in a separate 
            operation.
        </p>

        <h5>Tuples</h5>
        <p class="f_size">C# features built-in support for deconstructing tuples, which lets you unpackage all the items in a tuple 
            in a single operation. The general syntax for deconstructing a tuple is similar to the syntax for defining one: you enclose
             the variables to which each element is to be assigned in parentheses in the left side of an assignment statement. 
             For example, the following statement assigns the elements of a four-tuple to four separate variables:</p>

        <p class="f_size">&nbsp;&nbsp;&nbsp;&nbsp;var (name, address, city, zip) = contact.GetAddressInfo();</p>
    
        <p class="f_size">There are three ways to deconstruct a tuple:</p>

        <p class="f_size">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>&#x2022;</b>You can explicitly declare the type of each field inside 
        parentheses. The following example uses thisapproach to deconstruct the three-tuple returned by the QueryCityData method.</p>

        <p class="f_size">&nbsp;&nbsp;&nbsp;public static void Main()</br>
                        &nbsp;&nbsp;&nbsp;{</br>
                        &nbsp;&nbsp;&nbsp;   (string city, int population, double area) = QueryCityData("New York City");</br>
                        &nbsp;&nbsp;&nbsp;    // Do something with the data.</br>
                        &nbsp;&nbsp;&nbsp;}</p>

        <h5>User-defined types</h5>
        <p class="f_size">The following example overloads the Deconstruct method to return various combinations of properties of a 
            Person object. Individual overloads return:</p>

        <p class="f_size">&nbsp;&nbsp;&nbsp;<b>&#x2022;</b>A first and last name.</br>
            &nbsp;&nbsp;&nbsp;<b>&#x2022;</b>A first, middle, and last name.</br>
            &nbsp;&nbsp;&nbsp;<b>&#x2022;</b>A first name, a last name, a city name, and a state name.</p>
        
    <div data-pym-src="https://www.jdoodle.com/embed/v0/4UYE"></div>

    <script src="https://www.jdoodle.com/assets/jdoodle-pym.min.js" type="text/javascript">
    </script>
    </div>
    
	

      
    
