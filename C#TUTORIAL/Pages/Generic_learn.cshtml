@page
@model Generic_learn
@{
    ViewData["Title"] = "Home page";
}

     <link rel="stylesheet" href="~/css/stylesheet.css" />
    <div class="scroll">
        <center></br></br><h3>Generic classes and methods</h3></center>
        <p class="f_size">
            Generics introduces the concept of type parameters to .NET, which make it possible to design classes and methods that defer the 
            specification of one or more types until the class or method is declared and instantiated by client code. For example, by using 
            a generic type parameter T, you can write a single class that other client code can use without incurring the cost or risk of 
            runtime casts or boxing operations</p>
        
        <p class="f_size">You can also create custom generic types and methods to provide your own generalized solutions and design patterns that are type-safe and efficient.</p>

        <b><h6>Generics overview</h6></b></br>

        <p class="f_size">
            &nbsp;&nbsp;&nbsp;<b>&#x2022;</b>Use generic types to maximize code reuse, type safety, and performance.</br>
            &nbsp;&nbsp;&nbsp;<b>&#x2022;</b>The most common use of generics is to create collection classes.</br>
            &nbsp;&nbsp;&nbsp;<b>&#x2022;</b>You can create your own generic interfaces, classes, methods, events, and delegates.</br>
            &nbsp;&nbsp;&nbsp;<b>&#x2022;</b>Generic classes may be constrained to enable access to methods on particular data types.</br>
            &nbsp;&nbsp;&nbsp;<b>&#x2022;</b>Information on the types that are used in a generic data type may be obtained at run-time by using reflection.</br>

        </p>
        
    <div data-pym-src="https://www.jdoodle.com/embed/v0/4V82"></div>

    <script src="https://www.jdoodle.com/assets/jdoodle-pym.min.js" type="text/javascript">
    </script>
    </div>
    
	

      
    
